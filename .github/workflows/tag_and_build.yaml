on:
    push:
        branches:
        - main
    #pull_request:
    #  types: closed
    #release:
    #  types: [published]

jobs:
    build:
        name: Build ASCII Art Suite
        runs-on: ubuntu-latest
        steps:
        # initial checkout of this repo
        - uses: actions/checkout@v4
        - name: Sparse Checkout für Submodule
          run: |
            git submodule init
            git submodule update --depth 1 --checkout --remote
            cd generator/external/stb
            git sparse-checkout init --cone
            git sparse-checkout set --skip-checks stb_image.h
            git pull origin master
        - name: Shorten Image ref
          run: echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV
        - name: Set up QEMU
          uses: docker/setup-qemu-action@v3
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3
          with:
            version: v0.9.1 # Pin version to avoid Manifest parsing error in FluxCD
        - name: Login to Docker
          uses: docker/login-action@v3
          with:
            registry: ghcr.io
            username: ${{ github.actor }}
            password: ${{ secrets.DOCKER_CONTAINER_REGISTRY_PAT }}
        - name: Build and push Generator
          uses: docker/build-push-action@v6
          with:
            context: .
            file: ./docker/generator.Dockerfile
            platforms: linux/amd64,linux/arm64
            push: true
            tags: |
              ghcr.io/hackmac89/ascii_art_suite/ascii-art-generator:${{ env.SHORT_SHA }}
              ghcr.io/hackmac89/ascii_art_suite/ascii-art-generator:latest
            labels: org.opencontainers.image.source="https://github.com/hackmac89/ascii_art_suite/ascii-art-generator"
        - name: Build and push Viewer
          uses: docker/build-push-action@v6
          with:
            context: .
            file: ./docker/viewer.Dockerfile
            platforms: linux/amd64,linux/arm64
            push: true
            tags: |
              ghcr.io/hackmac89/ascii_art_suite/ascii-art-viewer:${{ env.SHORT_SHA }}
              ghcr.io/hackmac89/ascii_art_suite/ascii-art-viewer:latest
            labels: org.opencontainers.image.source="https://github.com/hackmac89/ascii_art_suite/ascii-art-viewer"
    tag:
        name: Tag and Release ASCII Art Suite
        runs-on: ubuntu-latest
        permissions:
            contents: write
        needs: build
        steps:
        # initial checkout of this repo
        - uses: actions/checkout@v4
        - name: Bump version and push tag
          uses: anothrNick/github-tag-action@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # if you don't want to set write permissions use a PAT token
            WITH_V: false
    build-release-artifacts:
        name: Build Release Artifacts
        runs-on: ${{ matrix.os }}  # Use dynamic runner based on OS
        needs: [build,tag]
        strategy:
          matrix:
            os: [windows-latest, ubuntu-latest, macos-latest]
            #arch: [amd64, arm64]
            include:
              - os: ubuntu-latest
                arch: amd64
                EXT: ""
              - os: macos-latest
                arch: arm64
                EXT: ""
              - os: windows-latest
                arch: amd64
                EXT: ".exe"
        steps:
        # initial checkout of this repo
        - uses: actions/checkout@v4
          with:
            fetch-depth: 0  # get tags for usagefor the asset naming later on...
        - name: Get previously created tag (Linux/Mac)
          if: matrix.os != 'windows-latest'
          id: get_tag_linux_mac
          run: |
            TAG=$(git describe --tags --abbrev=0 || echo $GITHUB_SHA)
            echo "new_tag=$TAG" >> $GITHUB_OUTPUT
            echo "NEW_TAG=$TAG" >> $GITHUB_ENV
        - name: Get previously created tag (Windows)
          if: matrix.os == 'windows-latest'
          id: get_tag_windows
          run: |
            $TAG = $(git describe --tags --abbrev=0) -or $GITHUB_SHA
            echo "new_tag=$TAG" >> $env:GITHUB_OUTPUT
            echo "NEW_TAG=$TAG" >> $env:GITHUB_ENV
          shell: pwsh
        - name: Sparse Checkout für Submodule
          run: |
            git submodule init
            git submodule update --depth 1 --checkout --remote
            cd generator/external/stb
            git sparse-checkout init --cone
            git sparse-checkout set --skip-checks stb_image.h
            git pull origin master
        - name: Install Dependencies (Linux)
          if: matrix.os == 'ubuntu-latest'
          run: sudo apt update && sudo apt install -y build-essential
        - name: Create dist directory (Windows)
          if: matrix.os == 'windows-latest'
          run: |
            if not exist dist mkdir dist
          shell: cmd
        - name: Create dist directory (Linux/Mac)
          if: matrix.os != 'windows-latest'
          run: mkdir -p dist
        # TODO: Use real cross compiling on the actual runners here,
        # e.g. by using "aarch64-linux-gnu-gcc" instead of "gcc" on the "ubuntu-latest" runner with the "arm64" architecture
        - name: Compile Generator
          run: |
            gcc -Wall -pedantic -std=c99 -O2 -v -o dist/aart_generator-${{ steps.get_tag_linux_mac.outputs.new_tag || steps.get_tag_windows.outputs.new_tag || env.NEW_TAG }}-${{ matrix.os == 'windows-latest' && 'windows' || matrix.os == 'macos-latest' && 'macos' || 'linux' }}-${{ matrix.arch }}${{ matrix.EXT }} generator/*.c -lm
        - name: Compile Viewer
          run: |
            gcc -Wall -pedantic -std=c99 -O2 -v -o dist/aart_viewer-${{ steps.get_tag_linux_mac.outputs.new_tag || steps.get_tag_windows.outputs.new_tag || env.NEW_TAG }}-${{ matrix.os == 'windows-latest' && 'windows' || matrix.os == 'macos-latest' && 'macos' || 'linux' }}-${{ matrix.arch }}${{ matrix.EXT }} viewer/*.c -lm
        - name: Upload Generator Artifacts
          uses: actions/upload-artifact@v4
          with:
            name: aart_generator-${{ steps.get_tag_linux_mac.outputs.new_tag || steps.get_tag_windows.outputs.new_tag || env.NEW_TAG }}-${{ matrix.os == 'windows-latest' && 'windows' || matrix.os == 'macos-latest' && 'macos' || 'linux' }}-${{ matrix.arch }}
            path: dist/aart_generator-${{ steps.get_tag_linux_mac.outputs.new_tag || steps.get_tag_windows.outputs.new_tag || env.NEW_TAG }}-${{ matrix.os == 'windows-latest' && 'windows' || matrix.os == 'macos-latest' && 'macos' || 'linux' }}-${{ matrix.arch }}${{ matrix.EXT }}
        - name: Upload Viewer Artifacts
          uses: actions/upload-artifact@v4
          with:
            name: aart_viewer-${{ steps.get_tag_linux_mac.outputs.new_tag || steps.get_tag_windows.outputs.new_tag || env.NEW_TAG }}-${{ matrix.os == 'windows-latest' && 'windows' || matrix.os == 'macos-latest' && 'macos' || 'linux' }}-${{ matrix.arch }}
            path: dist/aart_viewer-${{ steps.get_tag_linux_mac.outputs.new_tag || steps.get_tag_windows.outputs.new_tag || env.NEW_TAG }}-${{ matrix.os == 'windows-latest' && 'windows' || matrix.os == 'macos-latest' && 'macos' || 'linux' }}-${{ matrix.arch }}${{ matrix.EXT }}
    create_release:
        name: Create Release
        runs-on: ubuntu-latest
        needs: build-release-artifacts
        steps:
        # initial checkout of this repo
        - uses: actions/checkout@v4
          with:
            fetch-depth: 0  # get tags for usage in the "softprops/action-gh-release" action
        - name: Get previously created tag
          id: get_tag
          run: |
            echo "new_tag=$(git describe --tags --abbrev=0)" >> $GITHUB_OUTPUT
            echo "NEW_TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV
        - name: Download All Artifacts
          env:
            GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            TAG: ${{ env.NEW_TAG }}
          run: |
            mkdir -p dist
            for os in linux macos windows; do
              if [ "$os" == "linux" ]; then
                arch="amd64"
              elif [ "$os" == "macos" ]; then
                arch="arm64"
              elif [ "$os" == "windows" ]; then
                arch="amd64"
              fi
              for type in generator viewer; do
                artifact_name=aart_${type}-${TAG}-${os}-${arch}
                gh run download --name $artifact_name --dir dist/
              done
            done
        - name: Upload Binaries to Release
          uses: softprops/action-gh-release@v2
          #if: startsWith(github.ref, 'refs/tags/')
          with:
            files: dist/*
            name:  ${{ steps.get_tag.outputs.new_tag }}
            tag_name: ${{ steps.get_tag.outputs.new_tag }}
            token: ${{ secrets.AART_ASSET_RELEASE_TOKEN }}
